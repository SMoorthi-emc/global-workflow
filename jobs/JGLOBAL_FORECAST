#!/bin/ksh
set -x

export RUN_ENVIR=${RUN_ENVIR:-"nco"}
export PS4='$SECONDS + '
date


#############################
# Source relevant config files
#############################
configs="base fcst"
config_path=${EXPDIR:-$NWROOT/gfs.${gfs_ver}/parm/config}
for config in $configs; do
    . $config_path/config.$config
    status=$?
    [[ $status -ne 0 ]] && exit $status
done

if [ ${MODULES_TO_USE:-none} != none ] ; then
 . $MODULESHOME/init/sh 2>/dev/null
  module purge
  module load $MODULES_TO_USE 2>/dev/null
  module list
fi

##########################################
# Source machine runtime environment
##########################################
. $HOMEgfs/env/${machine}.env fcst
status=$?
[[ $status -ne 0 ]] && exit $status


##############################################
# Obtain unique process id (pid) and make temp directory
##############################################
export job=${job:-"fcst"}
export pid=${pid:-$$}
export outid=${outid:-"LL$job"}
export jobid=${jobid:-"${outid}.o${pid}"}
if [ $RUN_ENVIR = "nco" ]; then
    export DATA="$DATAROOT/${job}.${pid}"
else
    export DATAROOT="$RUNDIR/$CDATE/$CDUMP"
    export DATA="$DATAROOT/$job"
fi
[[ -d $DATA ]] && rm -rf $DATA
mkdir -p $DATA
cd $DATA


##############################################
# Run setpdy and initialize PDY variables
##############################################
export cycle="t${cyc}z"
setpdy.sh
. ./PDY


##############################################
# Define the Log File directory
##############################################
export jlogfile=${jlogfile:-$COMROOT/logs/jlogfiles/jlogfile.${job}.${pid}}


##############################################
# Determine Job Output Name on System
##############################################
export pgmout="OUTPUT.${pid}"
export pgmerr=errfile


##############################################
# Set variables used in the exglobal script
##############################################
export CDATE=${CDATE:-${PDY}${cyc}}
export CDUMP=${CDUMP:-${RUN:-"gfs"}}
if [ $RUN_ENVIR = "nco" ]; then
    export ROTDIR=${COMROOT:?}/$NET/$envir
    export RSTDIR=${GESROOT:?}/$envir
fi


##############################################
# Begin JOB SPECIFIC work
##############################################

# Restart conditions for GFS cycle come from GDAS
rCDUMP=$CDUMP
[[ $CDUMP = "gfs" ]] && export rCDUMP="gdas"

# Forecast length for GFS forecast
if [ $CDUMP = "gfs" ]; then
    export FHMAX=$FHMAX_GFS
    export FHOUT=$FHOUT_GFS
    export FHMAX_HF=$FHMAX_HF_GFS
    export FHOUT_HF=$FHOUT_HF_GFS
else
    export FHMAX_HF=0
    export FHOUT_HF=0
fi


##############################################
# Run relevant exglobal script
##############################################

env
msg="HAS BEGUN on `hostname`"
postmsg "$jlogfile" "$msg"
$LOGSCRIPT

export CPLDFV3_MOM6_CICE=${CPLDFV3_MOM6_CICE:-NO}
export USE_COLDSTART=${USE_COLDSTART:-.false.}
export FHCYC=${FHCYC_GFS:-24}

if [ $CPLDFV3_MOM6_CICE = YES ] ; then

  if [ ${warm_start:-.false.} = .false. -a $USE_COLDSTART = .true. ] ; then # one hour cold start for coupled run
                                                                            #------------------------------------
# coupled run with two step a cold start - make cold start run to $FHMAX_COLD (= 1 hour)
# --------------------------------------------------------------------------------------
    export FHMAX=$FHMAX_COLD
    export nsout=0
    . $CPLPREPSH cold
    status=$?
    [[ $status -ne 0 ]] && exit $status

#   export FHCYC=0
#   ${FORECASTSH:-$SCRgfs/exglobal_fcst_nemsfv3gfs.sh.ecf}
    ${FORECASTSH:-$SCRgfs/exglobal_fcst_emcufs.sh}
    status=$?
#   status=999
    [[ $status -ne 0 ]] && exit $status

    export FHMAX=$FHMAX_GFS
    export nsout=${NSOUT:-0}
    . $CPLPREPSH warm
    status=$?
    [[ $status -ne 0 ]] && exit $status

  else                                           # set up coupled warm or one step start or restaart run
                                                 #------------------------------------------------------
    export FHMAX=$FHMAX_GFS
    export nsout=${NSOUT:-0}
    if [ $USE_COLDSTART = .false. -a $FHMIN -eq 0 ] ; then  # warm start (one step or second step of two step)
      export restart=warm
    elif [ $FHMIN -gt 0 ] ; then                            # continue run from a restart at FHMIN > 0.0
      export restart=restart
    fi
    export restart=${restart:-'restart'}
    . $CPLPREPSH $restart
    status=$?
    [[ $status -ne 0 ]] && exit $status
  fi
else
  export nsout=${NSOUT:-0}
fi

#  run global forecast - coupled or uncoupled (warm or restart)
# -------------------------------------------------------------

#export FHCYC=${FHCYC_GFS:-24}
export FH_CHUNK=${FH_CHUNK:-$FHMAX}
if [ $CDUMP = "gfs" ] ; then
 if [ $FHMAX -gt $((FHMIN+FH_CHUNK)) ] ; then export FHMAX=$((FHMIN+FH_CHUNK)) ; fi
fi

#${FORECASTSH:-$SCRgfs/exglobal_fcst_nemsfv3gfs.sh.ecf}
${FORECASTSH:-$SCRgfs/exglobal_fcst_emcufs.sh}
status=$?
[[ $status -ne 0 ]] && exit $status


##############################################
# End JOB SPECIFIC work
##############################################

##############################################
# Final processing
##############################################
if [ -e "$pgmout" ] ; then
  cat $pgmout
fi

msg="ENDED NORMALLY."
postmsg "$jlogfile" "$msg"


##########################################
# Remove the Temporary working directory
##########################################
#BL2018
cd $DATAROOT/fcst
cat > run_is_done << EOF
FV3_MOM6_CICE5 run is done
EOF
#BL2018

if [ $CDUMP = "gfs" ] ; then
 if [ $FHMAX -lt $FHMAX_GFS ] ; then
   export FHMIN=$FHMAX
   export warm_start=.true.
   export ROCODIR=$HOMEgfs/ush/rocoto
   export CPLSCRIPT=${CPLSCRIPT:-cpl_setup.sh}
   ${SUBCMD:-$ROCODIR/sub_wcoss_d} -e FHMIN=$FHMIN,WARM_START=$warm_start,ROCODIR=$ROCODIR,CDATE=$CDATE,ATMRES=$ATMRES,OCNRES=$OCNRES,PSLOT=$PSLOT,LEVS=$LEVS -a $ACCOUNT -q debug -p 1/1/N -r 3072/1/1 -t 00:05:00 -j fv3gfs -o $ROTDIR/logs/$CDATE/gfsfcst_${FHMIN}_log $ROCODIR/$CPLSCRIPT
#  ./cpl_setup.sh $FHMIN $warm_start
   echo "submittied next segment from hour " $FHMIN 
 fi
fi

cd $DATAROOT
[[ $KEEPDATA = "NO" ]] && rm -rf $DATA
date
exit 0
